(User Story) “As a <role>, I want to <do something>, So that <big picture need or problem is solved>”

As a client, I want to develop a software simulator called UVSim for computer science students to learn machine language and computer architecture, so that students can execute their machine language programs on the simulator.

As a CS student, I want to run my BasicML program in the UVSim so I can understand how assembly-level instructions interact with CPU and memory.


Use Cases:

Actor: Program user
System:
User launches program
Program prompts user for a file
User enters a file name into the console
Program checks file name syntax, and if correct (and existing), reads the file into memory
If the program name is incorrect or does not exist, the appropriate error is raised, and user is prompted for a new file name
Program checks each word in the file for a word of length 5 (including sign), raising an error if a value is incorrect
Goal: Retrieve a file necessary for program operation

Actor: Program
System: 
Program encounters an “operation code” of 40 (the first two digits in the word)
Program jumps to the specified memory location, and continues operation as normal
Goal: Skip over subsequent operations to a specific location in memory

Actor: Program user
System: 
Program encounters an opcode of 10
Program prompts the user to enter a value
User enters the value and presses 'enter'
Program inserts the value given by the user into the operand of the instruction
Program continues to the next instruction
Goal: Input a value from the keyboard into memory

Actor: Program
System:
Program encounters an opcode of 43
Program stops execution
Program displays a message to the console
Why the program stopped (HALT instruction encountered)
At which memory location the instruction was encountered
The value present in the accumulator register
Ex. “HALT instruction encountered at memory location 67.  Accumulator value: 5555.”
Goal: Display program results in the console

Actor: Client,
System:
1: Set software parameters
2: Get updates from company
3: Test product and work out bugs
4: Have students test final product
Goal: UVSim Software simulator for students

Actor: Management,
System:
1: Assemble the production team and set boundaries
2: Assign tasks and deadlines
3: Check the progression and help when needed
4: Communicate with client about progression
5: Test Production
Goal: Completed Production of UVSim for Client

Actor: Programmer,
System: 
1: Select language for UVSim
2: Format language to Start program
3: Program code to separate the four-digit decimals in two parts: location numbers and memory numbers
4: Change the four-digit number according to input or output
5: Halt at 43 (end program)
Goal: Create a functional UVSim simulator system 

Actor: Student
System:
1: Start program with 00
2: Enter four-digit decimals into user-interface system
3: Watch input and output
4: Continue program until halt (43) ends program
Goal: Work with UVSim Simulator system 

Actor: Programmer
System: 
Programmer starts program
Programmer selects input file
Program encounters an opcode of 40
Program branches to specified area in memory.
Program continues until encountering a HALT
Goal: Branch to a specific part in memory.

Actor: Programmer
System:
The programmer submits their series of commands to the program.
The Program reads through all of the commands and confirms no errors and checks that there is a HALT. If there is no HALT the program cannot run and tells the user so in the console.
If there is an error the Program notifies the user of the error and the line that produced it.
The program prints out “Hello World” in the console.
The program terminates with the HALT command.
Goal: Print Hello World to console.

Actor: Programmer
System:
Programmer runs the program.
Program asks user for input file
User submits the path for the file
The program runs through the inputs, and notifies the user of an error if one is encountered
The program executes the inputs and loads data to memory.
The program then stores data into accumulator.
The program terminates with the HALT command.
Goal: Load and store data.

Actor: Programmer
System:
Programmer runs the program.
Program asks the user for input files.
Program encounters opcode '33'
Program multiplies number in memory by accumulator and stores result in accumulator.
The program terminates with the HALT command
Goal: Utilize multiplication opcode

Actor: Programmer
System:
Programmer runs the program.
Program asks the user for input files.
Program encounters opcode '32'
Program divides accumulator by number in memory and stores result in accumulator.
If the number in memory is zero, the program stops and throws a ZeroDivisionError.
The program terminates with the HALT command
Goal: Utilize division opcode
